import { Folder } from "../../../api/Models/Folder.ts";
import { File } from "../../../api/Models/File.ts";
import { useEffect, useState, useRef } from "react";
import {
  fetchCreateFolder,
  fetchDeleteFile,
  fetchFileBlob,
  fetchFileSystem,
  FileSystemResponse
} from "../../../api/fetchs/FileSystemApi.ts";
import { fetchCreateFile } from "../../../api/fetchs/FileSystemApi.ts"; // —Ç—É—Ç –ø—É—Ç—å –∫ —Ç–≤–æ–µ–º—É –º–µ—Ç–æ–¥—É
import './FileSystemBrowser.css';
import {FolderCreate} from "../../../api/Models/FolderCreate.ts";

export default function FileSystemBrowser() {
  const [currentDirectory, setCurrentDirectory] = useState<number>(null);
  const [fileSystem, setFileSystem] = useState<FileSystemResponse >({ folders: [], files: [] });
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [breadcrumbs, setBreadcrumbs] = useState<Folder[]>([]);
  const fileInputRef = useRef<HTMLInputElement>(null);

  const api_url = "http://localhost:8000";
  const determineRootFolderId = (data: FileSystemResponse): number => {
    if (data.folders.length > 0) return data.folders[0].parent;
    if (data.files.length > 0) return data.files[0].folder;
    return 10; // fallback
  };

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
  useEffect(() => {
    const loadInitialFileSystem = async () => {
      try {
        setLoading(true);
        // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        const data = await fetchFileSystem(undefined);
        setFileSystem(data);

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞
        const rootId = determineRootFolderId(data);
        setCurrentDirectory(rootId);

        setError(null);
      } catch (err) {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É');
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:', err);
      } finally {
        setLoading(false);
      }
    };

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ currentDirectory –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if (currentDirectory === undefined) {
      loadInitialFileSystem();
    }
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ currentDirectory
  useEffect(() => {
    if (currentDirectory === undefined) return;

    const loadFileSystem = async () => {
      try {
        setLoading(true);
        const data = await fetchFileSystem(currentDirectory);
        setFileSystem(data);
        setError(null);
      } catch (err) {
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É');
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:', err);
      } finally {
        setLoading(false);
      }
    };

    loadFileSystem();
  }, [currentDirectory]);
 const handleCreateFolder = async (folderName: string, parentId: number) => {
  const path = breadcrumbs
    .map(folder => folder.path) // –ò–∑–≤–ª–µ–∫–∞–µ–º path –∏–∑ –∫–∞–∂–¥–æ–≥–æ Folder
    .filter(path => path) // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    .join("/"); // –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–µ—Ä–µ–∑ —Å–ª—ç—à
  const folderData: FolderCreate = {
    name: folderName,
    path: path,
    parent: parseInt(parentId),
  };

  try {
    const createdFolder = await fetchCreateFolder(folderData);
    alert("–ü–∞–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!");

    // –û–±–Ω–æ–≤–ª—è–µ–º fileSystem, –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—É—é –ø–∞–ø–∫—É
    setFileSystem(prev => ({
      ...prev,
      folders: [...prev.folders, createdFolder]
    }));

    // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫—É –≤ breadcrumbs
    // setBreadcrumbs(prev => [...prev, createdFolder]);

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–∞–ø–∫–∏:", error);
    alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É");
  }
};
  const navigateToFolder = (folder: Folder) => {
    setCurrentDirectory(folder.id);
    setBreadcrumbs(prev => [...prev, folder]);
  };

  const navigateUp = () => {
    if (breadcrumbs.length > 0) {
      const newBreadcrumbs = [...breadcrumbs];
      newBreadcrumbs.pop();
      setBreadcrumbs(newBreadcrumbs);

       const parentFolder = newBreadcrumbs.length > 0
      ? newBreadcrumbs[newBreadcrumbs.length - 1].id
      : determineRootFolderId(fileSystem); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É
    setCurrentDirectory(parentFolder);
    }
  };

  const navigateToBreadcrumb = (index: number) => {
    const newBreadcrumbs = breadcrumbs.slice(0, index + 1);
    setBreadcrumbs(newBreadcrumbs);
    setCurrentDirectory(newBreadcrumbs[index].id);
  };

  const handleDownload = async (file: File) => {
    try {
      const blob = await fetchFileBlob(file.file);
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = file.name;
      document.body.appendChild(a);
      a.click();
      a.remove();
      window.URL.revokeObjectURL(url);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞:", error);
    }
  };

  const handleUploadButtonClick = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };

  const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    try {
      await fetchCreateFile(currentDirectory, file, file.name);

      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏
      const updatedData = await fetchFileSystem(currentDirectory);
      setFileSystem(updatedData);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞:', error);
    }
  };
  const handleDeleteFile = async(fileId:number)=>{
    await fetchDeleteFile(fileId);
     setFileSystem(prev => ({
    ...prev,
    files: prev.files.filter(file => file.id !== fileId) // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  }));

}


  if (loading) return <div>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  if (error) return <div>–û—à–∏–±–∫–∞: {error}</div>;

  return (
      <div className="file-system-browser">
        <div className="breadcrumbs">
          <button onClick={navigateUp} disabled={breadcrumbs.length === 0}>
            ‚Üë –ù–∞–≤–µ—Ä—Ö
          </button>
          <span
              onClick={() => {
                setBreadcrumbs([]);
                setCurrentDirectory(determineRootFolderId(fileSystem));
              }}
              style={{cursor: 'pointer', margin: '0 5px'}}
          >
          –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞
        </span>
          {breadcrumbs.map((folder, index) => (
              <span key={folder.id}>
            &gt;
                <span
                    onClick={() => navigateToBreadcrumb(index)}
                    style={{cursor: 'pointer', margin: '0 5px'}}
                >
              {folder.name}
            </span>
          </span>
          ))}
        </div>

        <div className="upload-section" style={{margin: '10px 0'}}>
          <button onClick={handleUploadButtonClick}>–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª</button>
          <input
              type="file"
              ref={fileInputRef}
              style={{display: 'none'}}
              onChange={handleFileChange}
          />
        </div>
        <div className="upload-section" style={{margin: '10px 0'}}>
          <button onClick={() => {
            const folderName = prompt("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞–ø–∫–∏:");
            if (folderName) handleCreateFolder(folderName, currentDirectory);
          }}>
            + –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É
          </button>
        </div>

        <div className="folders-list">
          <h3>–ü–∞–ø–∫–∏</h3>
          {fileSystem.folders.length === 0 ? (
              <p>–ü–∞–ø–æ–∫ –Ω–µ—Ç</p>
          ) : (
              <ul>
                {fileSystem.folders.map(folder => (
                    <li
                        key={folder.id}
                        onClick={() => navigateToFolder(folder)}
                        style={{cursor: 'pointer'}}
                    >
                      üìÅ {folder.name}
                    </li>
                ))}
              </ul>
          )}
        </div>

        <div className="files-list">
          <h3>–§–∞–π–ª—ã</h3>
          {fileSystem.files.length === 0 ? (
              <p>–§–∞–π–ª–æ–≤ –Ω–µ—Ç</p>
          ) : (
              <ul>
                {fileSystem.files.map(file => (
                    <li key={file.id}>
                      <a
                          href={api_url + file.file}
                          rel="noopener noreferrer"
                          download
                      >
                        üìÑ {decodeURIComponent(file.file.split('/').pop() || '')}
                      </a>
                      <button onClick={() => handleDeleteFile(file.id)}>x</button>
                    </li>
                ))}
              </ul>
          )}
        </div>
      </div>
  );
}
